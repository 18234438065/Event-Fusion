apiVersion: v1
kind: Secret
metadata:
  name: event-fusion-secrets
  namespace: event-fusion
  labels:
    app: event-fusion-service
type: Opaque
data:
  # Database passwords (base64 encoded)
  # Note: In production, use proper secret management tools like HashiCorp Vault
  REDIS_PASSWORD: ""  # Empty for no password
  
  # API Keys (base64 encoded)
  # Example: echo -n "your-secret-key" | base64
  API_SECRET_KEY: "ZXZlbnQtZnVzaW9uLXNlY3JldC1rZXktMjAyNA=="  # event-fusion-secret-key-2024
  JWT_SECRET_KEY: "and0LXNlY3JldC1rZXktZm9yLWV2ZW50LWZ1c2lvbi1zZXJ2aWNl"  # jwt-secret-key-for-event-fusion-service
  
  # External Service Credentials
  EXTERNAL_API_KEY: "ZXh0ZXJuYWwtYXBpLWtleS1mb3ItaW50ZWdyYXRpb24="  # external-api-key-for-integration
  EXTERNAL_API_SECRET: "ZXh0ZXJuYWwtYXBpLXNlY3JldC1mb3ItaW50ZWdyYXRpb24="  # external-api-secret-for-integration
  
  # Monitoring and Alerting
  GRAFANA_ADMIN_PASSWORD: "YWRtaW4xMjM="  # admin123
  PROMETHEUS_PASSWORD: "cHJvbWV0aGV1czEyMw=="  # prometheus123
  
  # SSL/TLS Certificates (if needed)
  # TLS_CERT: "LS0tLS1CRUdJTi..."
  # TLS_KEY: "LS0tLS1CRUdJTi..."
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: event-fusion
  labels:
    app: event-fusion-service
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry credentials for pulling private images
  # Create with: kubectl create secret docker-registry registry-secret \
  #   --docker-server=ghcr.io \
  #   --docker-username=your-username \
  #   --docker-password=your-token \
  #   --docker-email=your-email@example.com \
  #   --namespace=event-fusion
  .dockerconfigjson: eyJhdXRocyI6e319  # Empty auth for public images
---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-secrets
  namespace: event-fusion
  labels:
    app: kafka
type: Opaque
data:
  # Kafka SASL credentials (if using SASL authentication)
  KAFKA_SASL_USERNAME: "a2Fma2F1c2Vy"  # kafkauser
  KAFKA_SASL_PASSWORD: "a2Fma2FwYXNzd29yZA=="  # kafkapassword
  
  # Kafka SSL certificates (if using SSL)
  # KAFKA_SSL_KEYSTORE: "LS0tLS1CRUdJTi..."
  # KAFKA_SSL_TRUSTSTORE: "LS0tLS1CRUdJTi..."
  # KAFKA_SSL_KEY_PASSWORD: "a2V5cGFzc3dvcmQ="
---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secrets
  namespace: event-fusion
  labels:
    app: elasticsearch
type: Opaque
data:
  # Elasticsearch credentials (if using security)
  ELASTIC_USERNAME: "ZWxhc3RpYw=="  # elastic
  ELASTIC_PASSWORD: "ZWxhc3RpY3Bhc3N3b3Jk"  # elasticpassword
  
  # Elasticsearch certificates (if using SSL)
  # ELASTIC_CERTIFICATE: "LS0tLS1CRUdJTi..."
  # ELASTIC_KEY: "LS0tLS1CRUdJTi..."
---
apiVersion: v1
kind: Secret
metadata:
  name: video-processing-secrets
  namespace: event-fusion
  labels:
    app: video-processor
type: Opaque
data:
  # RTSP camera credentials
  RTSP_USERNAME: "YWRtaW4="  # admin
  RTSP_PASSWORD: "cGFzc3dvcmQ="  # password
  
  # Video storage credentials (if using cloud storage)
  STORAGE_ACCESS_KEY: "c3RvcmFnZS1hY2Nlc3Mta2V5"  # storage-access-key
  STORAGE_SECRET_KEY: "c3RvcmFnZS1zZWNyZXQta2V5"  # storage-secret-key
  
  # Video processing API keys
  VIDEO_API_KEY: "dmlkZW8tYXBpLWtleQ=="  # video-api-key
---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: event-fusion
  labels:
    app: monitoring
type: Opaque
data:
  # Alerting webhook URLs
  SLACK_WEBHOOK_URL: "aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvLi4u"  # https://hooks.slack.com/services/...
  DINGTALK_WEBHOOK_URL: "aHR0cHM6Ly9vYXBpLmRpbmd0YWxrLmNvbS9yb2JvdC9zZW5kLi4u"  # https://oapi.dingtalk.com/robot/send...
  
  # Email SMTP credentials
  SMTP_USERNAME: "bm90aWZpY2F0aW9uQGV4YW1wbGUuY29t"  # notification@example.com
  SMTP_PASSWORD: "c210cHBhc3N3b3Jk"  # smtppassword
  
  # Third-party monitoring service API keys
  DATADOG_API_KEY: "ZGF0YWRvZy1hcGkta2V5"  # datadog-api-key
  NEWRELIC_LICENSE_KEY: "bmV3cmVsaWMtbGljZW5zZS1rZXk="  # newrelic-license-key